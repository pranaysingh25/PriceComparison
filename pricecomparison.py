# -*- coding: utf-8 -*-
"""MVP - PriceComparison.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XLbcznX6Uv0r_XS98yXEON7mTdshKJDX
"""

## Importing Libraries

from ultralytics import YOLO
from PIL import Image
import requests
from bs4 import BeautifulSoup # web scrapping

## BASIC OBJECT RECOGNITION USING PRE-TRAINED MODEL YOLO

def object_recognition(img):
    model = YOLO("yolov8l.pt")
    allowed_objects = [24,25,26,28,29,39,40,41,42,67]
    results = model.predict(source=img, conf=0.8, max_det=3, classes= allowed_objects, show=False, save=False)  # save plotted images

    objects = []
    for r in results:

        boxes = r.boxes
        for box in boxes:

            c = box.cls
#             print(model.names[int(c)])
            objects.append(model.names[int(c)])

    objects = set(objects)
#     print("objects detected in the image are:", objects)

    return list(objects)

## WEB SCAPPER TO GET THE PRICES OF THESE OBJECTS FROM DIFFEREN ONLINE RETAILERS:

def get_google_shopping_prices(query):
    url = f"https://www.google.com/search?q={query}&tbm=shop"
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, 'html.parser')

    items = soup.find_all('div', class_='P8xhZc')
    products = []
    for item in items:
        name = item.find('a').text
        price = item.find('span', class_='HRLxBb').text
        url = item.find('a')['href'][9:]
        try:
            website = item.find('div', class_='dD8iuc').contents[-1].split()[1]
        except:
            website = url

        article = {'PRODUCT': name.strip(), 'PRICE': price, 'WEBSITE': website}
        products.append(article)
        
    return products

## ALGORITHM TO COMPARE PRICES AND LIST THEM FROM LOWER TO HIGHER

def sort_items_by_price(items, order='ascending'):

    # Define a lambda function to extract the price from each item
    get_price = lambda item: float(item['PRICE'].replace('$', '').replace('+', '').replace(' shipping', ''))

    # Sort the items based on price
    sorted_items = sorted(items, key=get_price, reverse=(order == 'descending'))

    return sorted_items

## EXAMPLE USAGE

"""
1. Image upload and storage

currently we are providing the sample images manually, it will be replaced later by a UI will let users to
select and upload images or click and upload real-time images.
Images with object detections are stored in local storage, it will be replaced by a secure database later
"""
# img = Image.open("../Downloads/sample_image.png")



# """
# 2. Object Recognition
# """
# objects = object_recognition(img)
# print("\nItems detected:", objects)



# """
# 3. WEB SCRAPPING
# """
# all_products = []
# for item_name in objects:
#     product = get_google_shopping_prices(item_name)
#     all_products.append(product)


# """
# 4. SORTING PRICES FROM LOW TO HIGH
# """
# for product in all_products:
#     sorted_items_asc = sort_items_by_price(product, order='ascending')
#     print("\nItems sorted by price(LOW TO HIGH) from different retailers:\n")
#     for item in sorted_items_asc:
#         for key, value in item.items():
#             print(key,": ", value)
#         print()

# """Cloud Storage of Pictures"""

# from azure.storage.blob import BlobServiceClient
# import cv2
# import json

# # Azure Blob Storage connection string and container name
# connection_string = "DefaultEndpointsProtocol=https;AccountName=firstspace;AccountKey=NUDjymihD3i2fxqpf+vMQrUMsd7r63K7xMFx2nvAEOLxFL9CEvaRp23WuFrcrcOkl9+C3iYD60ZO+AStJbjokw==;EndpointSuffix=core.windows.net"
# container_name = "firstcontainer"

# # Connect to Azure Blob Storage
# blob_service_client = BlobServiceClient.from_connection_string(connection_string)
# container_client = blob_service_client.get_container_client(container_name)

# # Function to store image and bounding box in Azure Blob Storage
# def store_image_to_blob(image_path, bounding_box):
#     # Upload image to Blob Storage
#     with open(image_path, "rb") as image_file:
#         blob_client = container_client.get_blob_client(blob=image_path)
#         blob_client.upload_blob(image_file)

#     # # Store bounding box data as JSON metadata
#     # blob_metadata = {
#     #     "bounding_box": bounding_box
#     # }
#     # blob_client.set_blob_metadata(metadata=blob_metadata)

# # Example usage
# image_path = 'sample_image.jpeg'
# image = cv2.imread(image_path)
# # Assume bounding box is represented as a dictionary
# bounding_box = {"x1": 100, "y1": 100, "x2": 200, "y2": 200}
# store_image_to_blob(image_path, json.dumps(bounding_box))

